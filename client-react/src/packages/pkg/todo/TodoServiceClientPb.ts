/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.12.4
// source: pkg/todo/todo.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as pkg_todo_todo_pb from '../../pkg/todo/todo_pb';


export class TodoServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorAddToDo = new grpcWeb.MethodDescriptor(
    '/TodoService/AddToDo',
    grpcWeb.MethodType.UNARY,
    pkg_todo_todo_pb.TodoAddRequest,
    pkg_todo_todo_pb.TodoResponse,
    (request: pkg_todo_todo_pb.TodoAddRequest) => {
      return request.serializeBinary();
    },
    pkg_todo_todo_pb.TodoResponse.deserializeBinary
  );

  addToDo(
    request: pkg_todo_todo_pb.TodoAddRequest,
    metadata: grpcWeb.Metadata | null): Promise<pkg_todo_todo_pb.TodoResponse>;

  addToDo(
    request: pkg_todo_todo_pb.TodoAddRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: pkg_todo_todo_pb.TodoResponse) => void): grpcWeb.ClientReadableStream<pkg_todo_todo_pb.TodoResponse>;

  addToDo(
    request: pkg_todo_todo_pb.TodoAddRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: pkg_todo_todo_pb.TodoResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/TodoService/AddToDo',
        request,
        metadata || {},
        this.methodDescriptorAddToDo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/TodoService/AddToDo',
    request,
    metadata || {},
    this.methodDescriptorAddToDo);
  }

  methodDescriptorGetToDo = new grpcWeb.MethodDescriptor(
    '/TodoService/GetToDo',
    grpcWeb.MethodType.UNARY,
    pkg_todo_todo_pb.GetToDoRequest,
    pkg_todo_todo_pb.TodoResponses,
    (request: pkg_todo_todo_pb.GetToDoRequest) => {
      return request.serializeBinary();
    },
    pkg_todo_todo_pb.TodoResponses.deserializeBinary
  );

  getToDo(
    request: pkg_todo_todo_pb.GetToDoRequest,
    metadata: grpcWeb.Metadata | null): Promise<pkg_todo_todo_pb.TodoResponses>;

  getToDo(
    request: pkg_todo_todo_pb.GetToDoRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: pkg_todo_todo_pb.TodoResponses) => void): grpcWeb.ClientReadableStream<pkg_todo_todo_pb.TodoResponses>;

  getToDo(
    request: pkg_todo_todo_pb.GetToDoRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: pkg_todo_todo_pb.TodoResponses) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/TodoService/GetToDo',
        request,
        metadata || {},
        this.methodDescriptorGetToDo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/TodoService/GetToDo',
    request,
    metadata || {},
    this.methodDescriptorGetToDo);
  }

  methodDescriptorGetOneToDo = new grpcWeb.MethodDescriptor(
    '/TodoService/GetOneToDo',
    grpcWeb.MethodType.UNARY,
    pkg_todo_todo_pb.GetOneToDoResquest,
    pkg_todo_todo_pb.TodoResponse,
    (request: pkg_todo_todo_pb.GetOneToDoResquest) => {
      return request.serializeBinary();
    },
    pkg_todo_todo_pb.TodoResponse.deserializeBinary
  );

  getOneToDo(
    request: pkg_todo_todo_pb.GetOneToDoResquest,
    metadata: grpcWeb.Metadata | null): Promise<pkg_todo_todo_pb.TodoResponse>;

  getOneToDo(
    request: pkg_todo_todo_pb.GetOneToDoResquest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: pkg_todo_todo_pb.TodoResponse) => void): grpcWeb.ClientReadableStream<pkg_todo_todo_pb.TodoResponse>;

  getOneToDo(
    request: pkg_todo_todo_pb.GetOneToDoResquest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: pkg_todo_todo_pb.TodoResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/TodoService/GetOneToDo',
        request,
        metadata || {},
        this.methodDescriptorGetOneToDo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/TodoService/GetOneToDo',
    request,
    metadata || {},
    this.methodDescriptorGetOneToDo);
  }

  methodDescriptorEditTodDo = new grpcWeb.MethodDescriptor(
    '/TodoService/EditTodDo',
    grpcWeb.MethodType.UNARY,
    pkg_todo_todo_pb.EditTodDoResquest,
    pkg_todo_todo_pb.TodoResponse,
    (request: pkg_todo_todo_pb.EditTodDoResquest) => {
      return request.serializeBinary();
    },
    pkg_todo_todo_pb.TodoResponse.deserializeBinary
  );

  editTodDo(
    request: pkg_todo_todo_pb.EditTodDoResquest,
    metadata: grpcWeb.Metadata | null): Promise<pkg_todo_todo_pb.TodoResponse>;

  editTodDo(
    request: pkg_todo_todo_pb.EditTodDoResquest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: pkg_todo_todo_pb.TodoResponse) => void): grpcWeb.ClientReadableStream<pkg_todo_todo_pb.TodoResponse>;

  editTodDo(
    request: pkg_todo_todo_pb.EditTodDoResquest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: pkg_todo_todo_pb.TodoResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/TodoService/EditTodDo',
        request,
        metadata || {},
        this.methodDescriptorEditTodDo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/TodoService/EditTodDo',
    request,
    metadata || {},
    this.methodDescriptorEditTodDo);
  }

  methodDescriptorDeleteTodDo = new grpcWeb.MethodDescriptor(
    '/TodoService/DeleteTodDo',
    grpcWeb.MethodType.UNARY,
    pkg_todo_todo_pb.DeleteToDoResquest,
    pkg_todo_todo_pb.TodoResponse,
    (request: pkg_todo_todo_pb.DeleteToDoResquest) => {
      return request.serializeBinary();
    },
    pkg_todo_todo_pb.TodoResponse.deserializeBinary
  );

  deleteTodDo(
    request: pkg_todo_todo_pb.DeleteToDoResquest,
    metadata: grpcWeb.Metadata | null): Promise<pkg_todo_todo_pb.TodoResponse>;

  deleteTodDo(
    request: pkg_todo_todo_pb.DeleteToDoResquest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: pkg_todo_todo_pb.TodoResponse) => void): grpcWeb.ClientReadableStream<pkg_todo_todo_pb.TodoResponse>;

  deleteTodDo(
    request: pkg_todo_todo_pb.DeleteToDoResquest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: pkg_todo_todo_pb.TodoResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/TodoService/DeleteTodDo',
        request,
        metadata || {},
        this.methodDescriptorDeleteTodDo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/TodoService/DeleteTodDo',
    request,
    metadata || {},
    this.methodDescriptorDeleteTodDo);
  }

}

