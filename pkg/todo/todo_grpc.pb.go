// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: pkg/todo/todo.proto

package todo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TodoServiceClient is the client API for TodoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoServiceClient interface {
	AddToDo(ctx context.Context, in *TodoAddRequest, opts ...grpc.CallOption) (*TodoResponse, error)
	GetToDo(ctx context.Context, in *GetToDoRequest, opts ...grpc.CallOption) (*TodoResponses, error)
	GetOneToDo(ctx context.Context, in *GetOneToDoResquest, opts ...grpc.CallOption) (*TodoResponse, error)
	EditTodDo(ctx context.Context, in *EditTodDoResquest, opts ...grpc.CallOption) (*TodoResponse, error)
	DeleteTodDo(ctx context.Context, in *DeleteToDoResquest, opts ...grpc.CallOption) (*TodoResponse, error)
}

type todoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoServiceClient(cc grpc.ClientConnInterface) TodoServiceClient {
	return &todoServiceClient{cc}
}

func (c *todoServiceClient) AddToDo(ctx context.Context, in *TodoAddRequest, opts ...grpc.CallOption) (*TodoResponse, error) {
	out := new(TodoResponse)
	err := c.cc.Invoke(ctx, "/TodoService/AddToDo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) GetToDo(ctx context.Context, in *GetToDoRequest, opts ...grpc.CallOption) (*TodoResponses, error) {
	out := new(TodoResponses)
	err := c.cc.Invoke(ctx, "/TodoService/GetToDo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) GetOneToDo(ctx context.Context, in *GetOneToDoResquest, opts ...grpc.CallOption) (*TodoResponse, error) {
	out := new(TodoResponse)
	err := c.cc.Invoke(ctx, "/TodoService/GetOneToDo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) EditTodDo(ctx context.Context, in *EditTodDoResquest, opts ...grpc.CallOption) (*TodoResponse, error) {
	out := new(TodoResponse)
	err := c.cc.Invoke(ctx, "/TodoService/EditTodDo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) DeleteTodDo(ctx context.Context, in *DeleteToDoResquest, opts ...grpc.CallOption) (*TodoResponse, error) {
	out := new(TodoResponse)
	err := c.cc.Invoke(ctx, "/TodoService/DeleteTodDo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoServiceServer is the server API for TodoService service.
// All implementations must embed UnimplementedTodoServiceServer
// for forward compatibility
type TodoServiceServer interface {
	AddToDo(context.Context, *TodoAddRequest) (*TodoResponse, error)
	GetToDo(context.Context, *GetToDoRequest) (*TodoResponses, error)
	GetOneToDo(context.Context, *GetOneToDoResquest) (*TodoResponse, error)
	EditTodDo(context.Context, *EditTodDoResquest) (*TodoResponse, error)
	DeleteTodDo(context.Context, *DeleteToDoResquest) (*TodoResponse, error)
	mustEmbedUnimplementedTodoServiceServer()
}

// UnimplementedTodoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTodoServiceServer struct {
}

func (UnimplementedTodoServiceServer) AddToDo(context.Context, *TodoAddRequest) (*TodoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToDo not implemented")
}
func (UnimplementedTodoServiceServer) GetToDo(context.Context, *GetToDoRequest) (*TodoResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToDo not implemented")
}
func (UnimplementedTodoServiceServer) GetOneToDo(context.Context, *GetOneToDoResquest) (*TodoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneToDo not implemented")
}
func (UnimplementedTodoServiceServer) EditTodDo(context.Context, *EditTodDoResquest) (*TodoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditTodDo not implemented")
}
func (UnimplementedTodoServiceServer) DeleteTodDo(context.Context, *DeleteToDoResquest) (*TodoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTodDo not implemented")
}
func (UnimplementedTodoServiceServer) mustEmbedUnimplementedTodoServiceServer() {}

// UnsafeTodoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoServiceServer will
// result in compilation errors.
type UnsafeTodoServiceServer interface {
	mustEmbedUnimplementedTodoServiceServer()
}

func RegisterTodoServiceServer(s grpc.ServiceRegistrar, srv TodoServiceServer) {
	s.RegisterService(&TodoService_ServiceDesc, srv)
}

func _TodoService_AddToDo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).AddToDo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TodoService/AddToDo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).AddToDo(ctx, req.(*TodoAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_GetToDo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetToDoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).GetToDo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TodoService/GetToDo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).GetToDo(ctx, req.(*GetToDoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_GetOneToDo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneToDoResquest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).GetOneToDo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TodoService/GetOneToDo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).GetOneToDo(ctx, req.(*GetOneToDoResquest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_EditTodDo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditTodDoResquest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).EditTodDo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TodoService/EditTodDo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).EditTodDo(ctx, req.(*EditTodDoResquest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_DeleteTodDo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteToDoResquest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).DeleteTodDo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TodoService/DeleteTodDo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).DeleteTodDo(ctx, req.(*DeleteToDoResquest))
	}
	return interceptor(ctx, in, info, handler)
}

// TodoService_ServiceDesc is the grpc.ServiceDesc for TodoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TodoService",
	HandlerType: (*TodoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToDo",
			Handler:    _TodoService_AddToDo_Handler,
		},
		{
			MethodName: "GetToDo",
			Handler:    _TodoService_GetToDo_Handler,
		},
		{
			MethodName: "GetOneToDo",
			Handler:    _TodoService_GetOneToDo_Handler,
		},
		{
			MethodName: "EditTodDo",
			Handler:    _TodoService_EditTodDo_Handler,
		},
		{
			MethodName: "DeleteTodDo",
			Handler:    _TodoService_DeleteTodDo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/todo/todo.proto",
}
